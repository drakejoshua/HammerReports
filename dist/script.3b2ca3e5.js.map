{"version":3,"sources":["../node_modules/hammerjs/hammer.js","script.js"],"names":["window","document","exportName","undefined","assign","VENDOR_PREFIXES","TEST_ELEMENT","createElement","TYPE_FUNCTION","round","Math","abs","now","Date","setTimeoutContext","fn","timeout","context","setTimeout","bindFn","invokeArrayArg","arg","Array","isArray","each","obj","iterator","i","forEach","length","call","hasOwnProperty","deprecate","method","name","message","deprecationMessage","e","Error","stack","replace","log","console","warn","apply","arguments","Object","target","TypeError","output","index","source","nextKey","extend","dest","src","merge","keys","inherit","child","base","properties","childP","baseP","prototype","create","constructor","_super","boolOrFn","val","args","ifUndefined","val1","val2","addEventListeners","types","handler","splitStr","type","addEventListener","removeEventListeners","removeEventListener","hasParent","node","parent","parentNode","inStr","str","find","indexOf","trim","split","inArray","findByKey","toArray","slice","uniqueArray","key","sort","results","values","push","a","b","prefixed","property","prefix","prop","camelProp","toUpperCase","_uniqueId","getWindowForElement","element","doc","ownerDocument","defaultView","parentWindow","SUPPORT_TOUCH","SUPPORT_POINTER_EVENTS","SUPPORT_ONLY_TOUCH","test","navigator","userAgent","COMPUTE_INTERVAL","INPUT_START","INPUT_MOVE","INPUT_END","INPUT_CANCEL","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","DIRECTION_ALL","PROPS_XY","PROPS_CLIENT_XY","Input","manager","callback","self","options","inputTarget","domHandler","ev","enable","init","inputHandler","eventType","input","pointersLen","pointers","changedPointersLen","changedPointers","isFirst","isFinal","session","pointersLength","firstInput","simpleCloneInputData","firstMultiple","offsetCenter","center","getCenter","timeStamp","deltaTime","angle","getAngle","distance","getDistance","offset","offsetDelta","prevDelta","prevInput","x","deltaX","y","deltaY","computeDeltaXY","offsetDirection","getDirection","overallVelocity","getVelocity","overallVelocityX","overallVelocityY","scale","start","end","rotation","getRotation","maxPointers","velocity","velocityX","velocityY","direction","last","lastInterval","v","computeIntervalInputData","srcEvent","computeInputData","emit","recognize","clientX","clientY","p1","p2","props","sqrt","atan2","PI","evEl","evTarget","evWin","destroy","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","MOUSE_ELEMENT_EVENTS","MOUSE_WINDOW_EVENTS","MouseInput","pressed","button","which","pointerType","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","PointerEventInput","store","pointerEvents","MSPointerEvent","PointerEvent","removePointer","eventTypeNormalized","toLowerCase","isTouch","storeIndex","pointerId","splice","SINGLE_TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","SingleTouchInput","started","touches","all","changed","changedTouches","concat","TOUCH_INPUT_MAP","TOUCH_TARGET_EVENTS","TouchInput","targetIds","allTouches","identifier","targetTouches","changedTargetTouches","filter","touch","DEDUP_TIMEOUT","DEDUP_DISTANCE","TouchMouseInput","mouse","primaryTouch","lastTouches","setLastTouch","eventData","lastTouch","lts","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","t","dx","dy","PREFIXED_TOUCH_ACTION","style","NATIVE_TOUCH_ACTION","TOUCH_ACTION_AUTO","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_NONE","TOUCH_ACTION_PAN_X","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MAP","touchMap","cssSupports","CSS","supports","getTouchActionProps","TouchAction","value","set","compute","actions","update","touchAction","recognizers","recognizer","getTouchAction","hasPanX","hasPanY","cleanTouchActions","join","preventDefaults","prevented","preventDefault","hasNone","isTapPointer","isTapMovement","isTapTouchTime","preventSrc","STATE_POSSIBLE","STATE_BEGAN","STATE_CHANGED","STATE_ENDED","STATE_RECOGNIZED","STATE_CANCELLED","Recognizer","defaults","id","state","simultaneous","requireFail","stateStr","directionStr","getRecognizerByNameIfManager","otherRecognizer","get","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","count","Hammer","preset","Manager","recognizeWith","dropRecognizeWith","requireFailure","dropRequireFailure","hasRequireFailures","canRecognizeWith","event","additionalEvent","tryEmit","canEmit","inputDataClone","reset","process","attrTest","optionPointers","isRecognized","isValid","threshold","directionTest","hasMoved","inOut","time","validPointers","validMovement","validTime","clearTimeout","taps","interval","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","VERSION","domEvents","inputClass","cssProps","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","handlers","oldCssProps","toggleCssProps","item","add","stop","force","stopped","curRecognizer","existing","remove","on","events","off","data","gestureEvent","createEvent","initEvent","gesture","dispatchEvent","triggerDomEvent","STATE_FAILED","Tap","Pan","Swipe","Pinch","Rotate","Press","define","amd","module","exports","require","_hammerjs","_interopRequireDefault","__esModule","default","box","getElementById","actionList","doubleTapRecognizer","tripleTapRecognizer","tapRecognizer","swipeUpRecognizer","swipeDownRecognizer","swipeLeftRecognizer","swipeRightRecognizer","panStartRecognizer","resetBoxDisplay","transform","innerHTML"],"mappings":"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","file":"script.3b2ca3e5.js","sourceRoot":"..\\src","sourcesContent":["/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n","// import styling files for the page\nimport \"./style.css\";\n\n// import code dependenies such as: hammerjs\nimport Hammer from \"hammerjs\";\n\n// import the DOM representation of the elements on the page\nvar box = document.getElementById(\"box\");\nvar actionList = document.getElementById(\"action-list\");\n\n// create a new manager instance( using hammer.js code library)\nvar manager = new Hammer.Manager(box);\n\n// create new custom tap recognizers( tap, doubletap, tripletap ) { using hammer.js code library }\nvar doubleTapRecognizer = new Hammer.Tap({\n  event: \"doubletap\",\n  taps: 2,\n  interval: 300,\n}); // for doubletap\n\nvar tripleTapRecognizer = new Hammer.Tap({\n  event: \"tripletap\",\n  taps: 3,\n  interval: 300,\n}); // for tripletap\n\nvar tapRecognizer = new Hammer.Tap({\n  event: \"tap\",\n  taps: 1,\n}); // for tap only\n\n// create new custom swipe recognizers( swipe-up, swipe-down, swipe-left, swipe-right ) { using hammer.js code library }\nvar swipeUpRecognizer = new Hammer.Swipe({\n  event: \"swipeup\",\n  velocity: 0.3,\n  direction: Hammer.DIRECTION_UP,\n}); // for swipe up\n\nvar swipeDownRecognizer = new Hammer.Swipe({\n  event: \"swipedown\",\n  velocity: 0.3,\n  direction: Hammer.DIRECTION_DOWN,\n}); // for swipe down\n\nvar swipeLeftRecognizer = new Hammer.Swipe({\n  event: \"swipeleft\",\n  velocity: 0.3,\n  direction: Hammer.DIRECTION_LEFT,\n}); // for swipe left\n\nvar swipeRightRecognizer = new Hammer.Swipe({\n  event: \"swiperight\",\n  velocity: 0.3,\n  direction: Hammer.DIRECTION_RIGHT,\n}); // for swipe right\n\nvar panStartRecognizer = new Hammer.Pan({\n  event: \"panstart\",\n  threshold: 10,\n  direction: Hammer.DIRECTION_ALL,\n}); // for pan start\n\n// add the recognizers to the manager\nmanager.add([\n  tripleTapRecognizer,\n  doubleTapRecognizer,\n  tapRecognizer,\n  swipeUpRecognizer,\n  swipeLeftRecognizer,\n  swipeRightRecognizer,\n  swipeDownRecognizer,\n  panStartRecognizer,\n]);\n\n// attach listeners to the manager for events as specified by the recognizers and\n// report them( events ) in the action-list and play their respective interactions as specified in the code\nmanager.on(\"tap\", function (event) {\n  // report the event in the action-list\n  actionList.innerHTML += `<li class=\"list-group-item list-group-item-action color-bg-wheat text-capitalize\">Tap detected</li>`;\n\n  // play the interaction\n  box.style.transform = `translateZ( -200px )`;\n  resetBoxDisplay();\n}); // single-tap ( tap )\n\nmanager.on(\"doubletap\", function (event) {\n  // report the event in the action-list\n  actionList.innerHTML += `<li class=\"list-group-item list-group-item-action color-bg-wheat text-capitalize\">double Tap detected</li>`;\n}); // double-tap\n\nmanager.on(\"tripletap\", function (event) {\n  // report the event in the action-list\n  actionList.innerHTML += `<li class=\"list-group-item list-group-item-action color-bg-wheat text-capitalize\">triple Tap detected</li>`;\n}); // triple-tap\n\nmanager.on(\"swipeup\", function (event) {\n  // report the event in the action-list\n  actionList.innerHTML += `<li class=\"list-group-item list-group-item-action color-bg-wheat text-capitalize\">swipe up detected</li>`;\n\n  // play the interaction\n  box.style.transform = `scale3d(1.8, 1, 3.5) translateY(20px)`;\n  resetBoxDisplay();\n}); // swipe-up\n\nmanager.on(\"swipeleft\", function (event) {\n  // report the event in the action-list\n  actionList.innerHTML += `<li class=\"list-group-item list-group-item-action color-bg-wheat text-capitalize\">swipe left detected</li>`;\n\n  // play the interaction\n  box.style.transform = `scale3d(1.8, 1, 3.5) translateX(-20px)`;\n  resetBoxDisplay();\n}); // swipe-down\n\nmanager.on(\"swiperight\", function (event) {\n  // report the event in the action-list\n  actionList.innerHTML += `<li class=\"list-group-item list-group-item-action color-bg-wheat text-capitalize\">swipe right detected</li>`;\n\n  // play the interaction\n  box.style.transform = `scale3d(1.8, 1, 3.5) translateX(20px)`;\n  resetBoxDisplay();\n}); // swipe-right\n\nmanager.on(\"swipedown\", function (event) {\n  // report the event in the action-list\n  actionList.innerHTML += `<li class=\"list-group-item list-group-item-action color-bg-wheat text-capitalize\">swipe down detected</li>`;\n\n  // play the interaction\n  box.style.transform = `scale3d(1.8, 1, 3.5) translateY(20px)`;\n  resetBoxDisplay();\n}); // swipe-down\n\nmanager.on(\"panstart\", function (event) {\n  // report the event in the action-list\n  actionList.innerHTML += `<li class=\"list-group-item list-group-item-action color-bg-wheat text-capitalize\">pan detected</li>`;\n\n  // play the interaction\n  box.style.transform = `scale3d(1.8, 1, 3.5) translateZ(-200px)`;\n  resetBoxDisplay();\n}); // pan-start\n\n// the resetBoxDisplay() function\n// this function is used to reset the CSS transform property when playing the interaction using a timeout\nfunction resetBoxDisplay() {\n  setTimeout(function () {\n    box.style.transform = `none`;\n  }, 500);\n}\n"]}